<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间 用于隔离sql语句 
	#{} 点位符 相当于jdbc的？
	${} 字符串拼接指令，如果入参为普通数据类型{}内只能为value

-->
<!-- 动态代理开发规则
	1. namespace必须是接口的全路径名
	2. 接口的方法名必须和sql id一致
	3 接口入参必须与paramtertype类型一致
	4接口的返回值必须与resultType类型一致
 -->
<mapper namespace="live.leer.mybatis.mapper.UserMapper">
	
	<!-- sql片段的抽取，定义 -->
	<sql id="user_sql">
		`id`,`username`,`birthday`,`sex`,`address` 
	</sql>
	
	<!-- id:statementId
		 resultType:查询结果集的数据类型
		 parameterType:查询的入参
	-->
	
	<select id="getUserById" parameterType="int" resultType="user">
		SELECT 
		  `id`,`username`,`birthday`,`sex`,`address` 
		FROM
		  `user` 
		WHERE 
			id = #{id}
	</select>
	<!-- resultType，如果返回结果为集合，只需设置为每一个的数据类型 -->
	<select id="getUserByUserName" parameterType="String" resultType="live.leer.mybatis.pojo.User">
		SELECT 
		  `id`,`username`,`birthday`,`sex`,`address` 
		FROM
		  `user` 
		WHERE 
			<!-- username LIKE #{name} -->
			username LIKE '%${value}%'
	</select>
	
	<!-- userGeneratedKeys：使用自增 keyProperty与之配套使用 -->
	<insert id="insertUser" parameterType="live.leer.mybatis.pojo.User" useGeneratedKeys="true" keyProperty="id">
		<!-- 
			selectKey主键返回
			keyProperty user中的主键属性
			resultType 主键数据类型
			order 指定selectKey何时执行 
		 -->
		<!-- <selectKey keyProperty="id" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey> -->
		
		INSERT INTO `user` (
		  `username`,
		  `birthday`,
		  `sex`,
		  `address`
		) 
		VALUES
		  (
		    #{username},
		    #{birthday},
		    #{sex},
		    #{address}
		  ) ;
		
	</insert>
	
	<!-- 1、resultType:如果要返回数据集合，只需设定为每一个元素的数据类型
		 2、 包装的pojo取值通过 "."来获取
	-->
	<select id="getUserByQueryVo" parameterType="queryvo" resultType="live.leer.mybatis.pojo.User">
		<!-- SELECT * FROM USER WHERE username LIKE #{name} -->
		SELECT * FROM USER WHERE username LIKE '%${user.username}%'
	</select>
	
	<!-- 查询用户总记录数，演示返回简单类型 -->
	<select id="getUserCount" resultType="int">
		SELECT COUNT(1) FROM USER
	</select>
	
	<!-- resultType，如果返回结果为集合，只需设置为每一个的数据类型 -->
	<select id="getUserByPojo" parameterType="user" resultType="live.leer.mybatis.pojo.User">
		SELECT 
		<!-- sql片段引用 -->
		  <include refid="user_sql"></include>
		FROM
		  `user` 
		WHERE 1 = 1
			<if test="username != null and username != ''">
				and username LIKE '%${username}%'
			</if>
			<if test="id != null">
				and sex = #{sex}
			</if>
			<!-- <where>
				<if test="username != null and username != ''">
					and username LIKE '%${username}%'
				</if>
				<if test="id != null">
					and sex = #{sex}
				</if>
				
			</where> -->

	</select>
	
	<!-- 演示动态sql-foreach标签的使用情景 -->
	<select id="getUserByIds" parameterType="queryvo"
		resultType="live.leer.mybatis.pojo.User">
		
		SELECT
		*
		FROM USER
		<!-- where会自动加上where同处理多余的and -->
		<where>
			<!-- id IN(1,10,25,30,34) -->
			<!-- foreach循环标签 
				 collection:要遍历的集合，来源入参 
				 open:循环开始前的sql 
				 separator:分隔符 
				 close:循环结束拼接的sql
			-->
			<foreach item="uid" collection="ids" open="id IN(" separator=","
				close=")">
				#{uid}
			</foreach>		</where>
	</select>
	
	
	<!-- 一对多关联查询 -->
	<resultMap type="user" id="user_order_map">
		<id property="id" column="id" />
		<result property="username" column="username" />
		<result property="birthday" column="birthday" />
		<result property="address" column="address" />
		<result property="sex" column="sex" />
		<result property="uuid" column="uuid" />
		
		<!-- collection:配置一对多关系
			 property:用户下的order属性
			 ofType:property的数据类型，支持别名
		-->
		<collection property="orders" ofType="order">
			<!-- id标签用于绑定主键 -->
			<id property="id" column="oid"/>
			<!-- 使用result绑定普通字段 -->
			<!-- <result property="userId" column="id"/> -->
			<result property="number" column="number"/>
			<result property="createtime" column="createtime"/>
		</collection>

	</resultMap>
	<!-- 一对多关联查询 -->
	<select id="getUserOrder" resultMap="user_order_map">
		SELECT
		u.`id`,
		u.`username`,
		u.`birthday`,
		u.`sex`,
		u.`address`,
		u.`uuid`,
		o.`id` oid,
		o.`number`,
		o.`createtime`
		FROM `user` u
		LEFT JOIN `order` o
		ON o.`user_id` = u.`id`
	</select>
	
</mapper>
